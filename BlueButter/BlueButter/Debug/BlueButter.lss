
BlueButter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803f00  000003cc  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  000083c4  000003c4  00000478  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000016  00803f04  00803f04  00000484  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000270  00000000  00000000  000004f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003b00  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e02  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000132d  00000000  00000000  00006062  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f0  00000000  00000000  00007390  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001bfd  00000000  00000000  00007780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000071d  00000000  00000000  0000937d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  00009a9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1c c1       	rjmp	.+568    	; 0x266 <__vector_22>
  2e:	44 c1       	rjmp	.+648    	; 0x2b8 <__vector_23>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1f e3       	ldi	r17, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	ec ec       	ldi	r30, 0xCC	; 204
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	bf e3       	ldi	r27, 0x3F	; 63
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 31       	cpi	r26, 0x1A	; 26
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	04 d0       	rcall	.+8      	; 0x70 <main>
  68:	ab c1       	rjmp	.+854    	; 0x3c0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  6c:	9d d0       	rcall	.+314    	; 0x1a8 <system_init>
  6e:	08 95       	ret

00000070 <main>:
#include <string.h>
#include <stdio.h>


int main(void)
{
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	60 97       	sbiw	r28, 0x10	; 16
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	de bf       	out	0x3e, r29	; 62
char character;
uint8_t tx[8] = "Out ";
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	e4 ec       	ldi	r30, 0xC4	; 196
  82:	f3 e8       	ldi	r31, 0x83	; 131
  84:	de 01       	movw	r26, r28
  86:	11 96       	adiw	r26, 0x01	; 1
  88:	01 90       	ld	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	8a 95       	dec	r24
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x18>
  90:	fe 01       	movw	r30, r28
  92:	36 96       	adiw	r30, 0x06	; 6
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	df 01       	movw	r26, r30
  98:	1d 92       	st	X+, r1
  9a:	8a 95       	dec	r24
  9c:	e9 f7       	brne	.-6      	; 0x98 <main+0x28>
uint8_t rx[8];
uint8_t i, length;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  9e:	e6 df       	rcall	.-52     	; 0x6c <atmel_start_init>
	USART_0_init();
  a0:	6c d1       	rcall	.+728    	; 0x37a <USART_0_init>
	USART_0_enable();
  a2:	83 d1       	rcall	.+774    	; 0x3aa <USART_0_enable>
 */
static inline void PORTA_set_port_dir(const uint8_t mask, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~mask;
  a4:	00 98       	cbi	0x00, 0	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= mask;
  a6:	80 b1       	in	r24, 0x00	; 0
  a8:	8e 6f       	ori	r24, 0xFE	; 254
  aa:	80 b9       	out	0x00, r24	; 0
  ac:	e0 e1       	ldi	r30, 0x10	; 16
  ae:	f4 e0       	ldi	r31, 0x04	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
  b0:	80 81       	ld	r24, Z
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	81 93       	st	Z+, r24
	/* No code here yet */
	
	/* set up port A*/
	PORTA_set_port_dir(0x01, PORT_DIR_IN);	/* set port PA0 to input */
	PORTA_set_port_dir(0xFE, PORT_DIR_OUT);	/* set all other A port pins to outputs */
	for(i=0; i<7; i++){						/* set all pins to non-inverted i.e 1 = true = +3v */
  b6:	e7 31       	cpi	r30, 0x17	; 23
  b8:	b4 e0       	ldi	r27, 0x04	; 4
  ba:	fb 07       	cpc	r31, r27
  bc:	c9 f7       	brne	.-14     	; 0xb0 <main+0x40>
static inline void PORTA_pin_set_inverted(const uint8_t pin, const bool inverted)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
  be:	e7 e1       	ldi	r30, 0x17	; 23
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
 *
 * \param[in] value Value to write to the port register
 */
static inline void PORTA_write_port(const uint8_t value)
{
	VPORTA.OUT = value;
  c8:	11 b8       	out	0x01, r1	; 1
		PORTA_pin_set_inverted(i, false);	
	}
	PORTA_pin_set_inverted(7, true);		/* set PA7 to inverted because it has a P-Channel driver */
	PORTA_write_port(0x00);	/* set all port A outputs to low (0v) */
	
	sei();				/*ENABLE_INTERRUPTS*/
  ca:	78 94       	sei
  cc:	7e 01       	movw	r14, r28
  ce:	e5 e0       	ldi	r30, 0x05	; 5
  d0:	ee 0e       	add	r14, r30
  d2:	f1 1c       	adc	r15, r1
		}

		USART_0_write(PORTA_get_port_level());		/* ... and confirm output */

		for (i=0; i<length; i++){		/* clear receive buffer */
			rx[i] = 0x20;		
  d4:	00 e2       	ldi	r16, 0x20	; 32
	
	sei();				/*ENABLE_INTERRUPTS*/
	
	/* Replace with your application code */
	while (1) {
		length = 0;
  d6:	10 e0       	ldi	r17, 0x00	; 0
		character = 0x00;
		while(character != 0x0A){		/* repeat until we get a newline */
			character = USART_0_read();
  d8:	18 d1       	rcall	.+560    	; 0x30a <USART_0_read>
			rx[length] = character;
  da:	e9 e0       	ldi	r30, 0x09	; 9
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ec 0f       	add	r30, r28
  e0:	fd 1f       	adc	r31, r29
  e2:	e1 0f       	add	r30, r17
  e4:	f1 1d       	adc	r31, r1
  e6:	80 83       	st	Z, r24
			length++;
  e8:	1f 5f       	subi	r17, 0xFF	; 255
  ea:	18 30       	cpi	r17, 0x08	; 8
  ec:	08 f0       	brcs	.+2      	; 0xf0 <main+0x80>
  ee:	17 e0       	ldi	r17, 0x07	; 7
	
	/* Replace with your application code */
	while (1) {
		length = 0;
		character = 0x00;
		while(character != 0x0A){		/* repeat until we get a newline */
  f0:	8a 30       	cpi	r24, 0x0A	; 10
  f2:	91 f7       	brne	.-28     	; 0xd8 <main+0x68>
			if(length>7){
				length = 7;				/* avoid buffer overflow */
			}
		}

		PORTA_write_port(rx[0]);		/* send received byte to port A */
  f4:	89 85       	ldd	r24, Y+9	; 0x09
  f6:	81 b9       	out	0x01, r24	; 1
  f8:	ce 01       	movw	r24, r28
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	6c 01       	movw	r12, r24

		for(i=0; i<4; i++){
			USART_0_write(tx[i]);		/* Send "Out " response to sender */
  fe:	d6 01       	movw	r26, r12
 100:	8d 91       	ld	r24, X+
 102:	6d 01       	movw	r12, r26
 104:	1b d1       	rcall	.+566    	; 0x33c <USART_0_write>
			}
		}

		PORTA_write_port(rx[0]);		/* send received byte to port A */

		for(i=0; i<4; i++){
 106:	ce 14       	cp	r12, r14
 108:	df 04       	cpc	r13, r15
 10a:	c9 f7       	brne	.-14     	; 0xfe <main+0x8e>
 * Read the input level on pins connected to a port
 *
 */
static inline uint8_t PORTA_get_port_level()
{
	return VPORTA.IN;
 10c:	82 b1       	in	r24, 0x02	; 2
			USART_0_write(tx[i]);		/* Send "Out " response to sender */
		}

		USART_0_write(PORTA_get_port_level());		/* ... and confirm output */
 10e:	16 d1       	rcall	.+556    	; 0x33c <USART_0_write>

		for (i=0; i<length; i++){		/* clear receive buffer */
 110:	11 23       	and	r17, r17
 112:	61 f0       	breq	.+24     	; 0x12c <main+0xbc>
 114:	fe 01       	movw	r30, r28
 116:	39 96       	adiw	r30, 0x09	; 9
 118:	11 50       	subi	r17, 0x01	; 1
 11a:	81 2f       	mov	r24, r17
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	8e 0f       	add	r24, r30
 122:	9f 1f       	adc	r25, r31
			rx[i] = 0x20;		
 124:	01 93       	st	Z+, r16
			USART_0_write(tx[i]);		/* Send "Out " response to sender */
		}

		USART_0_write(PORTA_get_port_level());		/* ... and confirm output */

		for (i=0; i<length; i++){		/* clear receive buffer */
 126:	8e 17       	cp	r24, r30
 128:	9f 07       	cpc	r25, r31
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0xb4>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
 12c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	e3 ed       	ldi	r30, 0xD3	; 211
 130:	f0 e3       	ldi	r31, 0x30	; 48
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0xc2>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xc8>
 138:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
 13a:	29 98       	cbi	0x05, 1	; 5
 13c:	cc cf       	rjmp	.-104    	; 0xd6 <main+0x66>

0000013e <ADC_0_init>:

	// ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV2_gc      /* CLK_PER divided by 2 */
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	f6 e0       	ldi	r31, 0x06	; 6
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	82 83       	std	Z+2, r24	; 0x02
	// ADC0.EVCTRL = 0 << ADC_STARTEI_bp; /* Start Event Input Enable: disabled */

	// ADC0.INTCTRL = 0 << ADC_RESRDY_bp /* Result Ready Interrupt Enable: disabled */
	//		 | 0 << ADC_WCMP_bp; /* Window Comparator Interrupt Enable: disabled */

	ADC0.MUXPOS = ADC_MUXPOS_INTREF_gc; /* Internal Ref */
 146:	8d e1       	ldi	r24, 0x1D	; 29
 148:	86 83       	std	Z+6, r24	; 0x06

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret

00000152 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp      /* voltage level monitor interrrupt enable: disabled */
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	              | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 15c:	43 e0       	ldi	r20, 0x03	; 3
 15e:	68 ed       	ldi	r22, 0xD8	; 216
 160:	81 e6       	ldi	r24, 0x61	; 97
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	39 d0       	rcall	.+114    	; 0x1d8 <protected_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret

0000016a <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

0000016e <mcu_init>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 16e:	e0 e1       	ldi	r30, 0x10	; 16
 170:	f4 e0       	ldi	r31, 0x04	; 4
 172:	80 81       	ld	r24, Z
 174:	88 60       	ori	r24, 0x08	; 8
 176:	81 93       	st	Z+, r24
 178:	e8 31       	cpi	r30, 0x18	; 24
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	f8 07       	cpc	r31, r24
 17e:	c9 f7       	brne	.-14     	; 0x172 <mcu_init+0x4>
 180:	e0 e3       	ldi	r30, 0x30	; 48
 182:	f4 e0       	ldi	r31, 0x04	; 4
 184:	80 81       	ld	r24, Z
 186:	88 60       	ori	r24, 0x08	; 8
 188:	81 93       	st	Z+, r24
 18a:	e8 33       	cpi	r30, 0x38	; 56
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	f8 07       	cpc	r31, r24
 190:	c9 f7       	brne	.-14     	; 0x184 <mcu_init+0x16>
 192:	08 95       	ret

00000194 <USART_0_initialization>:
 194:	23 98       	cbi	0x04, 3	; 4
 196:	e3 e3       	ldi	r30, 0x33	; 51
 198:	f4 e0       	ldi	r31, 0x04	; 4
 19a:	80 81       	ld	r24, Z
 19c:	87 7f       	andi	r24, 0xF7	; 247
 19e:	80 83       	st	Z, r24
 1a0:	22 9a       	sbi	0x04, 2	; 4
 1a2:	2a 98       	cbi	0x05, 2	; 5
 1a4:	ea d0       	rcall	.+468    	; 0x37a <USART_0_init>
 1a6:	08 95       	ret

000001a8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1a8:	e2 df       	rcall	.-60     	; 0x16e <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 1aa:	07 9a       	sbi	0x00, 7	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 1ac:	0f 9a       	sbi	0x01, 7	; 1
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 1ae:	e0 e3       	ldi	r30, 0x30	; 48
 1b0:	f4 e0       	ldi	r31, 0x04	; 4
 1b2:	80 81       	ld	r24, Z
 1b4:	88 7f       	andi	r24, 0xF8	; 248
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 1ba:	80 81       	ld	r24, Z
 1bc:	87 7f       	andi	r24, 0xF7	; 247
 1be:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 1c0:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 1c2:	29 98       	cbi	0x05, 1	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
 1c4:	cb df       	rcall	.-106    	; 0x15c <CLKCTRL_init>

	RTC_0_init();
 1c6:	0c d0       	rcall	.+24     	; 0x1e0 <RTC_0_init>

	VREF_0_init();
 1c8:	f6 d0       	rcall	.+492    	; 0x3b6 <VREF_0_init>

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
 1ca:	b9 df       	rcall	.-142    	; 0x13e <ADC_0_init>

	VREF_0_init();

	ADC_0_initialization();

	USART_0_initialization();
 1cc:	e3 df       	rcall	.-58     	; 0x194 <USART_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 1ce:	14 d0       	rcall	.+40     	; 0x1f8 <TIMER_0_init>

	USART_0_initialization();

	TIMER_0_initialization();

	CPUINT_init();
 1d0:	cc df       	rcall	.-104    	; 0x16a <CPUINT_init>

	SLPCTRL_init();
 1d2:	10 d0       	rcall	.+32     	; 0x1f4 <SLPCTRL_init>

	BOD_init();
 1d4:	be df       	rcall	.-132    	; 0x152 <BOD_init>
 1d6:	08 95       	ret

000001d8 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1d8:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1da:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1dc:	40 83       	st	Z, r20
	ret                             // Return to caller
 1de:	08 95       	ret

000001e0 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 1e0:	e0 e4       	ldi	r30, 0x40	; 64
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	81 11       	cpse	r24, r1
 1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <RTC_0_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
 1ea:	81 e8       	ldi	r24, 0x81	; 129
 1ec:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret

000001f4 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret

000001f8 <TIMER_0_init>:

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp; /* Module Enable: disabled */

	return 0;
}
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	08 95       	ret

000001fc <USART_0_default_rx_isr_cb>:
}

bool USART_0_is_tx_busy()
{
	return (!(USART0.STATUS & USART_TXCIF_bm));
}
 1fc:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 200:	e0 91 11 3f 	lds	r30, 0x3F11	; 0x803f11 <USART_0_rx_head>
 204:	ef 5f       	subi	r30, 0xFF	; 255
 206:	e7 70       	andi	r30, 0x07	; 7
 208:	80 91 10 3f 	lds	r24, 0x3F10	; 0x803f10 <USART_0_rx_tail>
 20c:	e8 17       	cp	r30, r24
 20e:	59 f0       	breq	.+22     	; 0x226 <USART_0_default_rx_isr_cb+0x2a>
 210:	e0 93 11 3f 	sts	0x3F11, r30	; 0x803f11 <USART_0_rx_head>
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ee 5e       	subi	r30, 0xEE	; 238
 218:	f0 4c       	sbci	r31, 0xC0	; 192
 21a:	90 83       	st	Z, r25
 21c:	80 91 0f 3f 	lds	r24, 0x3F0F	; 0x803f0f <USART_0_rx_elements>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 0f 3f 	sts	0x3F0F, r24	; 0x803f0f <USART_0_rx_elements>
 226:	08 95       	ret

00000228 <USART_0_default_udre_isr_cb>:
 228:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <__data_end>
 22c:	88 23       	and	r24, r24
 22e:	89 f0       	breq	.+34     	; 0x252 <USART_0_default_udre_isr_cb+0x2a>
 230:	e0 91 05 3f 	lds	r30, 0x3F05	; 0x803f05 <USART_0_tx_tail>
 234:	ef 5f       	subi	r30, 0xFF	; 255
 236:	e7 70       	andi	r30, 0x07	; 7
 238:	e0 93 05 3f 	sts	0x3F05, r30	; 0x803f05 <USART_0_tx_tail>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	e9 5f       	subi	r30, 0xF9	; 249
 240:	f0 4c       	sbci	r31, 0xC0	; 192
 242:	80 81       	ld	r24, Z
 244:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
 248:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <__data_end>
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	80 93 04 3f 	sts	0x3F04, r24	; 0x803f04 <__data_end>
 252:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <__data_end>
 256:	81 11       	cpse	r24, r1
 258:	05 c0       	rjmp	.+10     	; 0x264 <USART_0_default_udre_isr_cb+0x3c>
 25a:	e0 e0       	ldi	r30, 0x00	; 0
 25c:	f8 e0       	ldi	r31, 0x08	; 8
 25e:	85 81       	ldd	r24, Z+5	; 0x05
 260:	8f 7d       	andi	r24, 0xDF	; 223
 262:	85 83       	std	Z+5, r24	; 0x05
 264:	08 95       	ret

00000266 <__vector_22>:
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
 288:	e0 91 02 3f 	lds	r30, 0x3F02	; 0x803f02 <USART_0_rx_isr_cb>
 28c:	f0 91 03 3f 	lds	r31, 0x3F03	; 0x803f03 <USART_0_rx_isr_cb+0x1>
 290:	30 97       	sbiw	r30, 0x00	; 0
 292:	09 f0       	breq	.+2      	; 0x296 <__vector_22+0x30>
 294:	09 95       	icall
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_23>:
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
 2da:	e0 91 00 3f 	lds	r30, 0x3F00	; 0x803f00 <USART_0_udre_isr_cb>
 2de:	f0 91 01 3f 	lds	r31, 0x3F01	; 0x803f01 <USART_0_udre_isr_cb+0x1>
 2e2:	30 97       	sbiw	r30, 0x00	; 0
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <__vector_23+0x30>
 2e6:	09 95       	icall
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <USART_0_read>:
uint8_t USART_0_read(void)
{
	uint8_t tmptail;

	/* Wait for incoming data */
	while (USART_0_rx_elements == 0)
 30a:	80 91 0f 3f 	lds	r24, 0x3F0F	; 0x803f0f <USART_0_rx_elements>
 30e:	88 23       	and	r24, r24
 310:	e1 f3       	breq	.-8      	; 0x30a <USART_0_read>
		;
	/* Calculate buffer index */
	tmptail = (USART_0_rx_tail + 1) & USART_0_RX_BUFFER_MASK;
 312:	e0 91 10 3f 	lds	r30, 0x3F10	; 0x803f10 <USART_0_rx_tail>
 316:	ef 5f       	subi	r30, 0xFF	; 255
 318:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_0_rx_tail = tmptail;
 31a:	e0 93 10 3f 	sts	0x3F10, r30	; 0x803f10 <USART_0_rx_tail>
	ENTER_CRITICAL(R);
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	0f 92       	push	r0
	USART_0_rx_elements--;
 324:	80 91 0f 3f 	lds	r24, 0x3F0F	; 0x803f0f <USART_0_rx_elements>
 328:	81 50       	subi	r24, 0x01	; 1
 32a:	80 93 0f 3f 	sts	0x3F0F, r24	; 0x803f0f <USART_0_rx_elements>
	EXIT_CRITICAL(R);
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63

	/* Return data */
	return USART_0_rxbuf[tmptail];
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ee 5e       	subi	r30, 0xEE	; 238
 336:	f0 4c       	sbci	r31, 0xC0	; 192
}
 338:	80 81       	ld	r24, Z
 33a:	08 95       	ret

0000033c <USART_0_write>:
void USART_0_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_0_tx_head + 1) & USART_0_TX_BUFFER_MASK;
 33c:	20 91 06 3f 	lds	r18, 0x3F06	; 0x803f06 <USART_0_tx_head>
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_0_tx_elements == USART_0_TX_BUFFER_SIZE)
 344:	90 91 04 3f 	lds	r25, 0x3F04	; 0x803f04 <__data_end>
 348:	98 30       	cpi	r25, 0x08	; 8
 34a:	e1 f3       	breq	.-8      	; 0x344 <USART_0_write+0x8>
		;
	/* Store data in buffer */
	USART_0_txbuf[tmphead] = data;
 34c:	e2 2f       	mov	r30, r18
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	e9 5f       	subi	r30, 0xF9	; 249
 352:	f0 4c       	sbci	r31, 0xC0	; 192
 354:	80 83       	st	Z, r24
	/* Store new index */
	USART_0_tx_head = tmphead;
 356:	20 93 06 3f 	sts	0x3F06, r18	; 0x803f06 <USART_0_tx_head>
	ENTER_CRITICAL(W);
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	0f 92       	push	r0
	USART_0_tx_elements++;
 360:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <__data_end>
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 04 3f 	sts	0x3F04, r24	; 0x803f04 <__data_end>
	EXIT_CRITICAL(W);
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART0.CTRLA |= (1 << USART_DREIE_bp);
 36e:	e0 e0       	ldi	r30, 0x00	; 0
 370:	f8 e0       	ldi	r31, 0x08	; 8
 372:	85 81       	ldd	r24, Z+5	; 0x05
 374:	80 62       	ori	r24, 0x20	; 32
 376:	85 83       	std	Z+5, r24	; 0x05
 378:	08 95       	ret

0000037a <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); /* set baud rate register */
 37a:	e0 e0       	ldi	r30, 0x00	; 0
 37c:	f8 e0       	ldi	r31, 0x08	; 8
 37e:	8e ea       	ldi	r24, 0xAE	; 174
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	80 87       	std	Z+8, r24	; 0x08
 384:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
 386:	80 e8       	ldi	r24, 0x80	; 128
 388:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 38a:	80 ec       	ldi	r24, 0xC0	; 192
 38c:	86 83       	std	Z+6, r24	; 0x06
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_0_rx_tail     = x;
 38e:	10 92 10 3f 	sts	0x3F10, r1	; 0x803f10 <USART_0_rx_tail>
	USART_0_rx_head     = x;
 392:	10 92 11 3f 	sts	0x3F11, r1	; 0x803f11 <USART_0_rx_head>
	USART_0_rx_elements = x;
 396:	10 92 0f 3f 	sts	0x3F0F, r1	; 0x803f0f <USART_0_rx_elements>
	USART_0_tx_tail     = x;
 39a:	10 92 05 3f 	sts	0x3F05, r1	; 0x803f05 <USART_0_tx_tail>
	USART_0_tx_head     = x;
 39e:	10 92 06 3f 	sts	0x3F06, r1	; 0x803f06 <USART_0_tx_head>
	USART_0_tx_elements = x;
 3a2:	10 92 04 3f 	sts	0x3F04, r1	; 0x803f04 <__data_end>

	return 0;
}
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret

000003aa <USART_0_enable>:
 *
 * \return Nothing
 */
void USART_0_enable()
{
	USART0.CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
 3aa:	e0 e0       	ldi	r30, 0x00	; 0
 3ac:	f8 e0       	ldi	r31, 0x08	; 8
 3ae:	86 81       	ldd	r24, Z+6	; 0x06
 3b0:	80 6c       	ori	r24, 0xC0	; 192
 3b2:	86 83       	std	Z+6, r24	; 0x06
 3b4:	08 95       	ret

000003b6 <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF_CTRLA = VREF_ADC0REFSEL_2V5_gc    /* Voltage reference at 2.5V */
 3b6:	84 e2       	ldi	r24, 0x24	; 36
 3b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

	// VREF_CTRLB = 0 << VREF_ADC0REFEN_bp /* ADC0 reference enable: disabled */
	//		 | 0 << VREF_DAC0REFEN_bp; /* DAC0/AC0 reference enable: disabled */

	return 0;
}
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
